<?php

/**
 * @file
 * Web components integration with Drupal
 */

use Drupal\Core\Site\Settings;
use Drupal\webcomponents\HaxService;

function webcomponents_page_attachments_alter(array &$page) {
  $preconnect = array(
    'https://fonts.googleapis.com',
    'https://cdnjs.cloudflare.com',
    'https://i.creativecommons.org',
    'https://licensebuttons.net'
  );
  $config = \Drupal::config('webcomponents.settings');
  $base = $config->get('webcomponents_project_location');
  if ($config->get('webcomponents_project_location') == 'sites/all/libraries/webcomponents/') {
    $base = base_path() . $config->get('webcomponents_project_location');
  }
  else if ($config->get('webcomponents_project_location') != base_path() . 'sites/all/libraries/webcomponents/') {
    $preconnect[] = $config->get('webcomponents_project_location');
  }
  $loader = array(
    "preconnect" => $preconnect,
    "preload" => array(
      $base . "build.js",
      $base . "wc-registry.json",
      $base . "build/es6/node_modules/web-animations-js/web-animations-next-lite.min.js",
    ),
    "modulepreload" => array(
      $base . "build/es6/node_modules/@lrnwebcomponents/wc-autoload/wc-autoload.js",
      $base . "build/es6/node_modules/@lrnwebcomponents/dynamic-import-registry/dynamic-import-registry.js"
    )
  );
  foreach ($loader as $rel => $data) {
    foreach ($data as $key => $src) {
      $tag = array(
        '#type' => 'html_tag',
        '#tag' => 'link',
        '#attributes' => array(
          'rel' => $rel,
          'href' => $src,
        ),
      );
      if ($rel == "preload") {
        $tag['#attributes']['as'] = 'script';
        if ($src == $base . "wc-registry.json") {
          $tag['#attributes']['as'] = 'fetch';
          $tag['#attributes']['crossorigin'] = "anonymous";
        }
      }
      if ($rel == "modulepreload") {
        $tag2 = array(
          '#type' => 'html_tag',
          '#tag' => 'link',
          '#attributes' => array(
            'rel' => "preload",
            'href' => $src,
            'as' => "script",
            'crossorigin' => "anonymous"
          ),
        );
        $page['#attached']['html_head'][] = [$tag2, 'webcomponents-tag2-preload-' . $key];
      }
      $page['#attached']['html_head'][] = [$tag, 'webcomponents-tag-' . $rel . $key];
    }
  }
}

/**
 * Implements hook_page_bottom().
 *
 * Load all attachments for this page.
 */
function webcomponents_page_bottom(array &$page_bottom) {
  // if the HAX module set this already then just defer to that
  $location = \Drupal::config('webcomponents.settings')->get('webcomponents_project_location');
  // account for custom locations
  if ($location == 'other') {
    $location = \Drupal::config('webcomponents.settings')->get('webcomponents_project_location_other');
  }
  if ($location == 'sites/all/libraries/webcomponents/') {
    $location = base_path() . 'sites/all/libraries/webcomponents/';
  }
  $buildLocation = $location;
  // support for build file to come local but assets via CDN
  if (\Drupal::config('webcomponents.settings')->get('webcomponents_project_local_build_file')) {
    $buildLocation = base_path() . 'sites/all/libraries/webcomponents/';
  }
  $wc = new WebComponentsService();
  $page_bottom['webcomponents'] = [
    '#type' => 'inline_template',
    '#template' => '{{ somecontent|raw }}',
    '#context' => [
      'somecontent' => $wc->applyWebcomponents($buildLocation, $location)
    ],
    '#attached' => [
      'library' => [
        'webcomponents/webcomponents-behaviors' => 'webcomponents/webcomponents-behaviors'
      ]
    ]
  ];
}

/**
 * Class for implementing web component polyfills and other header aspects in a uniform manner
 */
class WebComponentsService {
  /**
   * This applies all pieces of a standard build appended to the header
   */
  public function applyWebcomponents($directory = '/', $cdn = '/') {
    return $this->getBuild($directory, "false", $cdn);
  }
  /**
   * Front end logic for ES5-AMD, ES6-AMD, ES6 version to deliver
   */
  public function getBuild($directory  = '/', $forceUpgrade = "false", $cdn = '/') {
    return '
    <script>window.__appCDN="' . $cdn . '";window.__appForceUpgrade=' . $forceUpgrade . ';</script>
    <script src="' . $directory . 'build.js"></script>';
  }
}
