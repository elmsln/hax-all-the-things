<?php

/**
 * @file
 * Headless Authoring eXperience, accept calls and make things haxable.
 */

use Drupal\Core\Site\Settings;
use Drupal\hax\HaxService;

/**
 * Implements hook_preprocess_hook().
 *
 * Add cms-hax tag and related markup as wrapper to body field.
 */
function hax_preprocess_field(&$vars) {

  // Allow for cache variability based on route name so this can be handled
  // evaluated separately for the view and the hax mode tabs.
  $vars['#cache']['contexts'][] = 'route.name';

  if (!hax_is_current_route_supported()) {
    return;
  }

  $entity_type = $vars['element']['#object']->getEntityTypeId();
  $view_mode = $vars['element']['#view_mode'];
  // @todo we could do this to other things too but this is the piece that forces it to body only
  if ($vars['field_name'] == 'body' && $entity_type == 'node' && $view_mode == 'full'
    && \Drupal::config('hax.settings')->get('hax_autoload_element_node_view')) {
    // support for custom appstore endpoints. This is "you know what the hell your doing" mode and
    // Drupal is really just a singular destination, not the final one.
    if (Drupal::config('hax.settings')->get('hax_custom_appstore') != '') {
      $appStoreConnection = json_encode([
        'url' => Drupal::config('hax.settings')->get('hax_custom_appstore'),
      ]);
    }
    else {
      $appStoreConnection = json_encode([
        'url' => base_path() . 'hax-app-store/' . \Drupal::csrfToken()->get('hax-app-store'),
      ]);
    }

    // Get the NID from current path.
    $request = \Drupal::request();
    $current_path = $request->getPathInfo();
    $path_args = explode('/', $current_path);
    $node_id = $path_args[2];
    // @todo this is clunky but works
    $redirect = str_replace('//', '/', base_path() . str_replace('/hax', '', $current_path));

    // TODO Not ideal, but we've fallen back to using the body text instead of
    // prefix/suffix due to filtering. This will go through the node's selected
    // text format for render.
    // @todo: convert to string replacement function or template.
    $vars['items'][0]['content']['#text'] = '<style>hax-tray { z-index:1251;}</style><cms-hax redirect-location="' . $redirect . '" open-default="open-default" end-point="' . base_path() . 'hax-node-save/' . $node_id . '/' . \Drupal::csrfToken()
        ->get() . '" app-store-connection=' . "'" . $appStoreConnection . "'" . '><template>'
     . $vars['items'][0]['content']['#text'] . '</template></cms-hax>';

  }
}

/**
 * Implements hook_hax_app_store().
 */
function hax_hax_app_store() {

  $config = \Drupal::config('hax.settings');
  $hax = new HaxService();
  $apikeys = [];
  $baseApps = $hax->baseSupportedApps();
  foreach ($baseApps as $key => $app) {

    if ($config->get('hax_' . $key . '_key') != '') {
      $apikeys[$key] = $config->get('hax_' . $key . '_key');
    }

  }
  $json = $hax->loadBaseAppStore($apikeys);
  // Pull in the core ones we supply.
  if (\Drupal::moduleHandler()->moduleExists('file')) {
    $tmp = json_decode(_hax_site_connection());
    array_push($json, $tmp);
  }
  return $json;
}

/**
 * Implements hook_hax_blox().
 */
function hax_hax_blox() {
  $config = \Drupal::config('hax.settings');
  $blox = json_decode($config->get('hax_blox'));
  // account for no setting so we at least have SOMETHING
  // for those initially using the editor
  if (!$blox || $blox == '') {
    $hax = new HaxService();
    $blox = $hax->loadBaseBlox();
  }
  return $blox;
}

/**
 * Implements hook_hax_stax().
 */
function hax_hax_stax() {
  $config = \Drupal::config('hax.settings');
  $stax = json_decode($config->get('hax_stax'));
  // account for no setting so we at least have SOMETHING
  // for those initially using the editor
  if (!$stax || $stax == '') {
    $hax = new HaxService();
    $stax = $hax->loadBaseStax();
  }
  return $stax;
}

/**
 * Implements hook_hax_autoloader().
 */
function hax_hax_autoloader() {
  // Generate autoload list.
  $autoloaderstring = \Drupal::config('hax.settings')
    ->get('hax_autoload_element_list');
  // Blow up based on space.
  $autoloader = json_decode($autoloaderstring);
  return $autoloader;
}

/**
 * Hax site connection.
 *
 * Connection details for this site. This is where all the really important
 * stuff is that will make people freak out.
 */
function _hax_site_connection() {
  global $base_url;
  $parts = explode('://', $base_url);

  
  $request = \Drupal::request(); 
  // check reverse proxy forwarded proto defined in drupal reverse proxy settings if reverse_proxy is set to true
  if(Settings::get('reverse_proxy',FALSE) && $proxy_proto_header = Settings::get('reverse_proxy_proto_header','x-forwarded-proto')){    
    $proxy_proto_header=strtolower(str_replace('_','-',$proxy_proto_header));        
    if($request->headers->has($proxy_proto_header)){
      if($request->headers->get($proxy_proto_header) == 'https'){        
        $parts[0] = 'https';
      }
    }  
  }
  elseif($request->isSecure()  || //check drupal server serving proto
    ($request->headers->has('x-forwarded-proto') && $request->headers->get('x-forwarded-proto') == 'https')   // check reverse proxy forwarded proto 
  ){   
    
    $parts[0] = 'https';
  }

  // Built in support when file_entity and restws is in place.
  $title = t('Internal files');
  $json = '{
    "details": {
      "title": "' . $title . '",
      "icon": "perm-media",
      "color": "light-blue",
      "author": "Drupal",
      "description": "Drupal site integration for HAX",
      "tags": ["media", "drupal"]
    },
    "connection": {
      "protocol": "' . $parts[0] . '",
      "url": "' . $parts[1] . '",
      "operations": {
        "browse": {
          "method": "GET",
          "endPoint": "file.json",
          "pagination": {
            "style": "link",
            "props": {
              "first": "page.first",
              "next": "page.next",
              "previous": "page.previous",
              "last": "page.last"
            }
          },
          "search": {
          },
          "data": {
          },
          "resultMap": {
            "defaultGizmoType": "image",
            "items": "list",
            "preview": {
              "title": "name",
              "details": "mime",
              "image": "url",
              "id": "uuid"
            },
            "gizmo": {
              "source": "url",
              "id": "uuid",
              "title": "name",
              "type": "type"
            }
          }
        },
        "add": {
          "method": "POST",
          "endPoint": "hax-file-save/' . \Drupal::csrfToken()->get('hax-file-save') . '",
          "acceptsGizmoTypes": [
            "image",
            "video",
            "audio",
            "pdf",
            "svg",
            "document",
            "csv"
          ],
          "resultMap": {
            "item": "data.file",
            "defaultGizmoType": "image",
            "gizmo": {
              "source": "url",
              "id": "uuid"
            }
          }
        }
      }
    }
  }';
  return $json;
}

function hax_page_attachments_alter(array &$page) {
  $tags = array(
    'https://fonts.googleapis.com',
    'https://cdnjs.cloudflare.com',
    'https://i.creativecommons.org',
    'https://licensebuttons.net'
  );
  $config = \Drupal::config('hax.settings');
  $base = $config->get('hax_project_location');
  if ($config->get('hax_project_location') != 'sites/all/libraries/webcomponents/') {
    $tags[] = $config->get('hax_project_location');
  }
  else if ($config->get('hax_project_location') == 'sites/all/libraries/webcomponents/') {
    $base = base_path() . $config->get('hax_project_location');
  }
  foreach ($tags as $key => $src) {
    $tag = array(
      '#type' => 'html_tag',
      '#tag' => 'link',
      '#attributes' => array(
        'rel' => 'preconnect',
        'crossorigin' => true,
        'href' => $src,
      ),
    );
    $page['#attached']['html_head'][] = [$tag, 'hax-tag-' . $key];
  }
  $tag = array(
    '#type' => 'html_tag',
    '#tag' => 'link',
    '#attributes' => array(
      'rel' => 'preload',
      'as' => 'script',
      'href' => $base . 'build.js',
    ),
  );
  $page['#attached']['html_head'][] = [$tag, 'hax-preload'];
}

/**
 * Implements hook_page_bottom().
 *
 * Load all attachments for this page.
 */
function hax_page_bottom(array &$page_bottom) {
  $location = \Drupal::config('hax.settings')->get('hax_project_location');
  // account for custom locations
  if ($location == 'other') {
    $location = \Drupal::config('hax.settings')->get('hax_project_location_other');
  }
  // append base_path if this site has a url to start it
  if (strpos($location, 'http') === FALSE) {
    $location = base_path() . $location;
  }
  $buildLocation = $location;
  // support for build file to come local but assets via CDN
  if (\Drupal::config('hax.settings')->get('hax_project_local_build_file')) {
    $buildLocation = base_path() . 'sites/all/libraries/webcomponents/';
  }
  $wc = new WebComponentsService();
  $page_bottom['hax'] = [
    '#type' => 'inline_template',
    '#template' => '{{ somecontent|raw }}',
    '#context' => [
      'somecontent' => $wc->applyWebcomponents($buildLocation, $location)
    ],
    '#attached' => [
      'library' => [
        'hax/webcomponents-behaviors' => 'hax/webcomponents-behaviors'
      ]
    ]
  ];
}

/**
 * Alter the form so that we can easily integrate our singular element form w/ Drupal
 */
function hax_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (isset($form['#attributes']['class'][0]) && $form['#attributes']['class'][0] == 'hax-settings') {
    $form['#attached']['library'][] = 'hax/hax-form-helper';
  }
}


/**
 * Identify whether the current route is supported for HAX deployment.
 *
 * @return bool
 *   TRUE if the current route is supported.
 */
function hax_is_current_route_supported() {

  $route_name = \Drupal::routeMatch()->getRouteName();

  if ($route_name == 'hax.node_form') {
    return TRUE;
  }

  return FALSE;
}

/**
 * Class for implementing web component polyfills and other header aspects in a uniform manner
 */
class WebComponentsService {
  /**
   * This applies all pieces of a standard build appended to the header
   */
  public function applyWebcomponents($directory = '/', $cdn = '/') {
    return $this->getBuild($directory, "false", $cdn);
  }
  /**
   * Front end logic for ES5-AMD, ES6-AMD, ES6 version to deliver
   */
  public function getBuild($directory  = '/', $forceUpgrade = "false", $cdn = '/') {
    return '
    <script>window.__appCDN="' . $cdn . '";window.__appForceUpgrade=' . $forceUpgrade . ';</script>
    <script src="' . $directory . 'build.js"></script>';
  }
}
