<?php
/**
 * @file Web components integration
 */
define('DRUPAL_ROOT', getcwd());
define('WEBCOMPONENTS_CLASS_IDENTIFIER', 'webcomponent-module-selector');
include_once 'WebComponentsService.php';

if (!function_exists('drupal_json_encode')) {
  function drupal_json_encode($json) {
    return json_encode($json);
  }
}
if (!function_exists('drupal_json_output')) {
  function drupal_json_output($var = NULL) {
    // We are returning JSON, so tell the browser.
    header('Content-Type:application/json');
    if (isset($var)) {
      echo drupal_json_encode($var);
    }
  }
}
if (!function_exists('drupal_add_html_head')) {
  function drupal_add_html_head($data = NULL, $key = NULL) {
    $output = '';
    $keys = &drupal_static(__FUNCTION__);
    // ensure we only add 1x
    if (!isset($keys[$key])) {
      $keys[$key] = $key;
      if (isset($data['#tag'])) {
        $output = '<' . $data['#tag'] . ' ';
        if (isset($data['#attributes'])) {
          foreach ($data['#attributes'] as $attr => $value) {
            $output .= $attr . '="' . $value . '"';
          }
        }
        $output .= '/>';
      }
      if (isset($data['#markup'])) {
        $output .= $data['#markup'];
      }
      drupal_set_html_head($output);
    }
  }
}

if (!function_exists('drupal_static')) {
  function &drupal_static($name, $default_value = NULL, $reset = FALSE) {
    static $data = array(), $default = array();
    // First check if dealing with a previously defined static variable.
    if (isset($data[$name]) || array_key_exists($name, $data)) {
      // Non-NULL $name and both $data[$name] and $default[$name] statics exist.
      if ($reset) {
        // Reset pre-existing static variable to its default value.
        $data[$name] = $default[$name];
      }
      return $data[$name];
    }
    // Neither $data[$name] nor $default[$name] static variables exist.
    if (isset($name)) {
      if ($reset) {
        // Reset was called before a default is set and yet a variable must be
        // returned.
        return $data;
      }
      // First call with new non-NULL $name. Initialize a new static variable.
      $default[$name] = $data[$name] = $default_value;
      return $data[$name];
    }
    // Reset all: ($name == NULL). This needs to be done one at a time so that
    // references returned by earlier invocations of drupal_static() also get
    // reset.
    foreach ($default as $name => $value) {
      $data[$name] = $value;
    }
    // As the function returns a reference, the return should always be a
    // variable.
    return $data;
  }
}


/**
 * Implements hook_menu().
 */
function webcomponents_menu() {
  $items = array();
  $items['admin/settings/webcomponents'] = array(
    'title' => 'Web components',
    'description' => 'Settings for basic customizations to web components.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webcomponents_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Set CDN if you want
 */
function webcomponents_admin_settings() {
  $form = array();
  $form['webcomponents_project_location'] = [
    '#type' => 'select',
    '#title' => t('Webcomponents Location'),
    '#default_value' => variable_get('webcomponents_project_location', 'https://webcomponents.psu.edu/cdn/'),
    '#options' => array(
      'sites/all/libraries/webcomponents/' => 'Local libraries folder (sites/all/libraries/webcomponents/)',
      'https://webcomponents.psu.edu/cdn/' => 'Penn State CDN',
      'https://cdn.waxam.io/' => 'Waxam CDN',
      'other' => t('Other'),
    ),
    '#description' => t("Use this to point to CDNs or if you've installed your web components some place else. Start without a slash and end with a slash."),
  ];
  $form['webcomponents_project_location_other'] = [
    '#type' => 'textfield',
    '#title' => t('Other Location'),
    '#default_value' => variable_get('webcomponents_project_location_other', ''),
    '#maxlength' => 1000,
    '#description' => t("Only use this if you need to use a source other than the above supported options."),
  ];
  return system_settings_form($form);
}

/**
 * Implements hook_init().
 */
function webcomponents_init() {
  $location = variable_get('webcomponents_project_location', 'https://webcomponents.psu.edu/cdn/');
  if ($location == 'other') {
    $location = variable_get('webcomponents_project_location_other', '');
  }
  // append base_path if this site has a url to start it
  if (strpos($location, 'http') === FALSE) {
    $location = base_path() . $location;
  }
  // load webcomponentsjs polyfill library if it exists
  $files = array('build.js');
  drupal_alter('webcomponents_build_file_location', $files);
  $wc = new WebComponentsService();
  $element = array(
    '#type' => 'markup',
    '#markup' => $wc->applyWebcomponents($location, $files),
  );
  drupal_add_html_head($element, 'webcomponents');
}

/**
 * URI callback for entity
 */
function webcomponent_uri($webcomponent) {
  return array(
    'path' => 'webcomponent/' . $webcomponent->machine_name,
  );
}

/**
 * Return output for rendering a component
 * @param  array $component fully loaded webcomponent entity.
 * @return string            rendered representation of the component
 */
function _webcomponents_render_component($component) {
  if (isset($component->properties)) {
    if (!is_array($component->properties)) {
      $component->properties = unserialize($component->properties);
    }
    // support token replacement of properties passed in
    foreach ($component->properties as &$property) {
      $property = token_replace($property);
    }
    $vars = array(
      'tag' => $component->machine_name,
      'properties' => $component->properties,
    );
    // support compressing slots into the innerHTML tag
    if (isset($component->slots)) {
      // support single slot name
      if (is_string($component->slots)) {
        $vars['innerHTML'] = $component->slots;
      }
      // support for multiple slot names
      else if (is_array($component->slots)) {
        $vars['innerHTML'] = '';
        foreach ($component->slots as $name => $content) {
          $vars['innerHTML'] .= '<span slot="' . $name . '">' . $content . '</span>';
        }
      }
    }
    if (!isset($vars['properties']['class'])) {
      $vars['properties']['class'] = WEBCOMPONENTS_CLASS_IDENTIFIER;
    }
    else {
      $vars['properties']['class'] .= ' ' . WEBCOMPONENTS_CLASS_IDENTIFIER;
    }
    // allow other projects to add onto and modify the webcomponent before it renders
    // useful for tag wrapping for systems
    drupal_alter('webcomponent_render', $vars, $component);
    $output = theme('webcomponent', $vars);
    return $output;
  }
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function webcomponents_theme() {
  // test all components on the file system against what's
  // in the database to ensure the data models haven't changed
  _webcomponents_rebuild();
  // hilariously minor template
  return array(
    'webcomponent' => array(
      'arguments' => array(
        'element' => array(
          'tag' => '',
          'properties' => array(),
          'innerHTML' => '',
          'wrap_tag' => '',
          'wrap_tag_close' => ''
        ),
      ),
      'template' => 'webcomponent',
      'path' => drupal_get_path('module', 'webcomponents') . '/templates',
    ),
  );
}

/**
 * Implements hook_nodeapi().
 */
function webcomponents_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'update':
    // perform check for everything that IS NOT a webcomponent since that's circular
    if (isset($node->webcomponents_additional) && !empty($node->webcomponents_additional)) {
      // insert into this table based on the revision and all known webcomponent
      // additional field data that we've stored
      db_insert('webcomponents_content')
      ->fields(array(
        'etid' => $node->nid,
        'etvid' => $node->vid,
        'etype' => 'node',
        'additional_properties' => serialize($node->webcomponents_additional),
      ))
      ->execute();
    }
    break;
    case 'load':
      if (db_table_exists('webcomponents_content')) {
        $result = db_query("SELECT additional_properties FROM {webcomponents_content} WHERE etype='node' AND etid='" . $node->nid ."' AND etvid='" . $node->vid . "'");
        while ($record = db_fetch_object($result)) {
          $node->webcomponents_additional = unserialize($record->additional_properties);
        }
      }
    break;
  }
}

/**
 * Load all webcomponents in the database.
 * @return array array of entities or empty.
 */
function webcomponents_load_all($force_rebuild = FALSE) {
  $entities = &drupal_static(__FUNCTION__);
  // @ignore druplart_conditional_assignment
  if (!$entities) {
    $entities = array();
    $result = db_query("SELECT * FROM {webcomponents}");
    while ($record = db_fetch_object($result)) {
      $record->properties = unserialize($record->properties);
      $entities[$record->machine_name] = $record;
    }
  }
  return $entities;
}

/**
 * Helper function to return all components as an array of tag names.
 */
function _webcomponents_all_tags() {
  $tags = array();
  $components = webcomponents_load_all();
  foreach ($components as $component) {
    $tags[] = $component->machine_name;
  }
  return $tags;
}

/**
 * Rebuild webcomponents from the file system.
 */
function _webcomponents_rebuild($hide_messages = FALSE) {
  // force rebuild of components from static
  $processed = array();
  // load all possible web components
  $componentfiles = webcomponents_load_webcomponents_files();
  // build the registry of possible component types
  $registry = _webcomponents_build_registry();
  // loop through results found, tagged by format they are in
  foreach ($componentfiles as $format => $files) {
    // process each file based on user defined callback for
    // how we've been told to handle processing of this component type
    if (!empty($files)) {
      foreach ($files as $file) {
        if (isset($registry[$format])) {
          $processed[$file] = call_user_func($registry[$format]['process'], $file);
          // ensure there was actually a match of some kind in there
          // with support for multiple element definitions per file
          if (!empty($processed[$file]) && is_array($processed[$file])) {
            foreach ($processed[$file] as $component) {
              // try and load webcomponent by machine name
              $entity = webcomponent_load_by_name($component->machine_name);
              if (isset($entity->wid)) {
                foreach ($component as $key => $value) {
                  // see if any aspects changed
                  if ($key != 'file' && isset($entity->{$key}) && $entity->{$key} != $value) {
                    if (!$hide_messages) {
                      drupal_set_message(t('Web components have changed! Make sure that your attributes are correctly reflected in your site. @key changed on @machine from @old to @new', array('@key' => $key, '@old' => serialize($entity->{$key}), '@new' => serialize($value), '@machine' => $component->machine_name)), 'warning', TRUE);
                    }
                    $entity->{$key} = $value;
                  }
                }
                if (is_array($entity->properties)) {
                  $entity->properties = serialize($entity->properties);
                }
                _webcomponents_d6_save('webcomponent', $entity);
              }
              else {
                // try and create the entity instead
                if (!empty($component->properties)) {
                  $component->properties = serialize($component->properties);
                }
                // ensure the file wasn't empty
                if (isset($component->machine_name)) {
                  $component->wid = NULL;
                  _webcomponents_d6_save('webcomponent', $component);
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Replacement for entity_save.
 */
function _webcomponents_d6_save($type, $entity) {
  // Generate the node table query and the node_revisions table query.
  if (is_null($entity->wid)) {
    drupal_write_record('webcomponents', $entity);
  }
  else {
    drupal_write_record('webcomponents', $entity, 'wid');
  }
}

/**
 * Return all available web component types registered.
 * Basically just that they have a callback so we know how
 * to process and convert them from static into database driven.
 * @return array array of possible formats and callbacks
 */
function _webcomponents_build_registry() {
  $formats = module_invoke_all('register_component_format');
  drupal_alter('register_component_format', $formats);
  return $formats;
}

/**
 * Assembles components available to Drupal.
 * @return array files where components live
 */
function webcomponents_load_webcomponents_files() {
  $componentfiles = module_invoke_all('webcomponents');
  drupal_alter('webcomponents', $components);
  return $componentfiles;
}

/**
 * Load webcomponent by name
 * @param  string $name machine name of a webcomponent
 * @return object       fully loaded entity
 */
function webcomponent_load_by_name($name) {
  $entity = new stdClass();
  $result = db_query("SELECT * FROM {webcomponents} WHERE machine_name='" . $name . "'");
  while ($record = db_fetch_object($result)) {
    $record->properties = unserialize($record->properties);
    $entity = $record;
  }
  return $entity;
}

/**
 * Sniff out html files in a directory
 * @param  string $dir a directory to search for .js
 * @return array       an array of html files to look for web components in
 */
function _webcomponents_find_includes($dir, $ignore = array(), $find = '.js') {
  $files = array();
  // common things to ignore
  $ignore[] = '.';
  $ignore[] = '..';
  $ignore[] = 'index.html';
  $ignore[] = 'node_modules';
  $ignore[] = 'demo';
  if (is_dir($dir)) {
    // step into the webcomponents directory and find all html templates
    $di = new DirectoryIterator(DRUPAL_ROOT . '/' . $dir);
    foreach ($di as $fileinfo) {
      $fname = $fileinfo->getFilename();
      // check for our find value skipping ignored values
      if (strpos($fname, $find) && !in_array($fname, $ignore)) {
        $files[] = $dir . $fileinfo->getFilename();
      }
      elseif (is_dir($dir . $fname) && !in_array($fname, $ignore)) {
        $di2 = new DirectoryIterator($dir . $fname);
        foreach ($di2 as $fileinfo2) {
          $fname2 = $fileinfo2->getFilename();
          // check for our find value skipping ignored values
          if (strpos($fname2, $find) && !in_array($fname2, $ignore)) {
            $files[] = $dir . $fname . '/' . $fname2;
          }
          elseif (is_dir($dir . $fname . '/' . $fname2) && !in_array($fname2, $ignore)) {
            $di3 = new DirectoryIterator($dir . $fname . '/' . $fname2);
            foreach ($di3 as $fileinfo3) {
              $fname3 = $fileinfo3->getFilename();
              // check for our find value skipping ignored values
              if (strpos($fname3, $find) && !in_array($fname3, $ignore)) {
                $files[] = $dir . $fname . '/' . $fname2 . '/' . $fname3;
              }
            }
          }
        }
      }
    }
  }
  return $files;
}

/**
 * Implements hook_webcomponent_attached_files_alter().
 */
function webcomponents_webcomponent_attached_files_alter(&$files) {
  $libraries = libraries_get_libraries();
  $configfile = DRUPAL_ROOT . '/' . $libraries['webcomponents'] . '/webcomponents.json';
  // support for a webcomponents.json file to tell us what to append
  if (file_exists($configfile)) {
    $file = file_get_contents($configfile);
    $config = json_decode($file);
    foreach ($files as $fname => $file) {
      // ensure name is NOT relative to this site for comparison
      // as the webcomponents.json file will be relative to where
      // it was placed and not the site it's being utilized in
      $nameTest = str_replace($libraries['webcomponents'] . '/', '', $fname);
      // remove things if they don't appear
      if (!in_array($nameTest, $config->elements)) {
        unset($files[$fname]);
      }
    }
  }
}