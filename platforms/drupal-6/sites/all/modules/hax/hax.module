<?php
/**
 * @file
 * Headless Authoring eXperience, all we do is accept calls and make things haxable in the first place.
 */

include_once 'HAXService.php';

/**
 * Implements hook_perm().
 */
function hax_perm() {
  return array('use hax');
}

/**
 * Implements hook_menu().
 */
function hax_menu() {
  $items = array();
  $items['hax-node-save/%node/%'] = array(
    'page callback' => '_hax_node_save',
    'page arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
    'access callback' => '_hax_node_access',
    'access arguments' => array('update', 1),
  );
  $items['hax-app-store/%'] = array(
    'page callback' => '_hax_load_app_store',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('use hax'),
  );
  $items['node/%node/hax'] = array(
    'title' => 'Block editor mode',
    'description' => 'Edit the node with HAX',
    'page callback' => '_hax_node_form',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'access callback' => '_hax_node_access',
    'access arguments' => array('update', 1),
  );
  $items['admin/settings/hax'] = array(
    'title' => 'HAX block editor',
    'description' => 'Settings for basic customizations to HAX.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hax_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Helper function to make outline designer settings more obvious.
 */
function hax_admin_settings() {
  $form = array();
  // collapse default state
  $form['hax_autoload_element_list'] = array(
    '#type' => 'textfield',
    '#title' => t('Elements to autoload'),
    '#default_value' => variable_get('hax_autoload_element_list', 'oer-schema lrn-aside grid-plate tab-list magazine-cover video-player image-compare-slider license-element self-check multiple-choice lrn-table hero-banner task-list media-image lrndesign-blockquote meme-maker a11y-gif-player paper-audio-player wikipedia-query lrn-vocab lrn-math person-testimonial citation-element code-editor place-holder stop-note q-r wave-player'),
    '#description' => "This allows for auto-loading elements known to play nice with HAX. If you've written any webcomponents that won't automatically be loaded into the page via that module this allows you to attempt to auto-load them when HAX loads. For example, if you have a video-player element in your bower_components directory and want it to load on this interface, this would be a simple way to do that. Spaces only between elements, no comma",
  );
  $hax = new HAXService();
  $baseApps = $hax->baseSupportedApps();
  foreach ($baseApps as $key => $app) {
    $form['hax_' . $key . '_key'] = array(
      '#type' => 'textfield',
      '#title' => t('@name API key', array('@name' => $app['name'])),
      '#default_value' => variable_get('hax_' . $key . '_key', ''),
      '#description' => t('See') . ' ' . l(t('@name developer docs', array('@name' => $app['name'])), $app['docs']) . ' ' . t('for details'),
    );
  }
  return system_settings_form($form);
}

/**
 * Callback to assemble the hax app store
 */
function _hax_load_app_store($token) {
  // ensure we had data PUT here and it is valid
  if (drupal_valid_token($token, 'hax')) {
    $hax = new HAXService();
    $appStore = module_invoke_all('hax_app_store');
    drupal_alter('hax_app_store', $appStore);
    // send back happy headers
    drupal_set_header("Content-Type: application/json");
    // define status
    drupal_set_header("Status: 200");
    $elementstring = variable_get('hax_autoload_element_list', 'oer-schema lrn-aside grid-plate tab-list magazine-cover video-player image-compare-slider license-element self-check multiple-choice lrn-table hero-banner task-list media-image lrndesign-blockquote meme-maker a11y-gif-player paper-audio-player wikipedia-query lrn-vocab lrn-math person-testimonial citation-element code-editor place-holder stop-note q-r wave-player');
    $return = array(
      'status' => 200,
      'apps' => $appStore,
      'autoloader' => explode(' ', $elementstring),
      'blox' => $hax->loadBaseBlox(),
	  	'stax' => $hax->loadBaseStax(),
    );
      
    // output the response as json
    print json_encode($return);
  }
}

/**
 * Callback to save just the body field.
 */
function _hax_node_save($node, $token) {
  // ensure we had data PUT here and it is valid
  if ($_SERVER['REQUEST_METHOD'] == 'PUT' && drupal_valid_token($token, 'hax')) {
    // load the data from input stream
    $body = file_get_contents("php://input");
    $node->body = $body;
    node_save($node);
    // send back happy headers
    drupal_set_header("Content-Type: application/json");
    // define status
    drupal_set_header("Status: 200");

    $return = array(
      'status' => 200,
      'message' => t('Save successful!'),
      'data' => $node,
    );
    // output the response as json
    print json_encode($return);
    // bail early
    exit;
  }
}

/**
 * Permission + Node access check.
 */
function _hax_node_access($op, $node) {
  if (user_access('use hax') && node_access($op, $node)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Present the node form but wrap the content in hax-body tag
 * @param  [type] $node [description]
 * @return [type]       [description]
 */
function _hax_node_form($node) {
  // set page title
  drupal_set_title(t('HAX edit @title', array('@title' => $node->title)));
  // generate autoload list
  $appStoreConnection = array(
    'url' => base_path() . 'hax-app-store/' . drupal_get_token('hax'),
  );
  // write content to screen, wrapped in tag to do all the work
  $content = '
  <cms-hax redirect-location="' . base_path() . 'node/' . $node->nid . '" open-default end-point="' . base_path() . 'hax-node-save/' . $node->nid . '/' . drupal_get_token('hax') . '" app-store-connection=' . "'" . json_encode($appStoreConnection) . "'" . '>
    <template>' . 
    check_markup($node->body, $node->format) . 
    '</template>
  </cms-hax>';
  return $content;
}

/**
 * Implements hook_hax_app_store().
 */
function hax_hax_app_store() {
  $hax = new HAXService();
  $apikeys = array();
  $baseApps = $hax->baseSupportedApps();
  foreach ($baseApps as $key => $app) {
    if (variable_get('hax_' . $key . '_key', '') != '') {
      $apikeys[$key] = variable_get('hax_' . $key . '_key', '');
    }
  }
  $json = $hax->loadBaseAppStore($apikeys);
  return $json;
}
