define(["meta", "require", "../../../lit-element/lit-element.js", "../../../@polymer/iron-icons/av-icons.js", "../../../@polymer/iron-icons/communication-icons.js", "../../../@polymer/iron-icons/device-icons.js", "../../../@polymer/iron-icons/editor-icons.js", "../../../@polymer/iron-icons/hardware-icons.js", "../../../@polymer/iron-icons/image-icons.js", "../../../@polymer/iron-icons/iron-icons.js", "../../../@polymer/iron-icons/maps-icons.js", "../../../@polymer/iron-icons/notification-icons.js", "../../../@polymer/iron-icons/places-icons.js", "../../../@polymer/iron-icons/social-icons.js", "../../lrn-icons/lrn-icons.js", "../../mdi-iconset-svg/mdi-iconset-svg.js", "../../hax-iconset/hax-iconset.js", "../../hax-body-behaviors/lib/HAXFields.js", "../../simple-fields/simple-fields.js", "../../simple-fields/lib/simple-fields-form.js", "./hax-element-card-list.js"], function (meta, _require, _litElement, _avIcons, _communicationIcons, _deviceIcons, _editorIcons, _hardwareIcons, _imageIcons, _ironIcons, _mapsIcons, _notificationIcons, _placesIcons, _socialIcons, _lrnIcons, _mdiIconsetSvg, _haxIconset, _HAXFields, _simpleFields, _simpleFieldsForm, _haxElementCardList) {
  "use strict";

  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_04c8c8c0856511eaa66301b3a4f2e8c5() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <simple-fields-form\n        id=\"form\"\n        autoload\n        load-endpoint=\"", "\"\n        method=\"", "\"\n        .schematizer=\"", "\"\n        .elementizer=\"", "\"\n        @response=\"", "\"\n        @haxcore.search.haxcore-search-autoloader-value-changed=\"", "\"\n        @haxcore.search.haxcore-search-columns-value-changed=\"", "\"\n        @value-changed=\"", "\"\n      >\n      </simple-fields-form>\n    "]);

    _templateObject2_04c8c8c0856511eaa66301b3a4f2e8c5 = function _templateObject2_04c8c8c0856511eaa66301b3a4f2e8c5() {
      return data;
    };

    return data;
  }

  function _templateObject_04c8c8c0856511eaa66301b3a4f2e8c5() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host([loading]) hax-element-card-list {\n          visibility: hidden;\n          opacity: 0;\n          transition: 1s ease-in-out all;\n        }\n        hax-element-card-list {\n          visibility: visible;\n          opacity: 1;\n        }\n        hexagon-loader[loading] {\n          position: absolute;\n          width: 100%;\n        }\n        [hidden] {\n          display: none !important;\n        }\n      "]);

    _templateObject_04c8c8c0856511eaa66301b3a4f2e8c5 = function _templateObject_04c8c8c0856511eaa66301b3a4f2e8c5() {
      return data;
    };

    return data;
  }

  /**
   * `hax-element-list-selector`
   * selects a hax element
   * @demo demo/hax.html
   * @element hax-element-list-selector
   */
  var HaxElementListSelector =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(HaxElementListSelector, _LitElement);
    babelHelpers.createClass(HaxElementListSelector, null, [{
      key: "tag",
      get: function get() {
        return "hax-element-list-selector";
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject_04c8c8c0856511eaa66301b3a4f2e8c5())];
      }
    }]);

    function HaxElementListSelector() {
      var _this;

      babelHelpers.classCallCheck(this, HaxElementListSelector);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxElementListSelector).call(this));
      _this.loading = false;
      _this.cols = 3;
      _this.showCardList = false;
      _this.imports = [];
      _this.haxData = [];
      _this.noSchema = {};
      _this.method = "GET";
      _this.autoload = true; // default fields json blob, most implementations should provide their own though obviously

      _this.fieldsEndpoint = _this.pathFromUrl(decodeURIComponent(meta.url)) + "fields.json";

      if (window.WCGlobalBasePath) {
        _this.basePath = window.WCGlobalBasePath;
      } else {
        _this.basePath = _this.pathFromUrl(decodeURIComponent(meta.url)) + "../../../";
      }

      setTimeout(function () {
        window.addEventListener("active-tab-changed", _this._activeTabChanged.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);

      _this.addEventListener("response", _this._response);

      _this.addEventListener("value-changed", _this._valueChanged);

      return _this;
    }

    babelHelpers.createClass(HaxElementListSelector, [{
      key: "pathFromUrl",
      // simple path from a url modifier
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _litElement.html)(_templateObject2_04c8c8c0856511eaa66301b3a4f2e8c5(), this.fieldsEndpoint, this.method, _HAXFields.HaxSchematizer, _HAXFields.HaxElementizer, this._response, function (e) {
          return console.log("--changed", e, e.detail);
        }, function (e) {
          return _this2.cols = e.detail.value;
        }, this._valueChanged);
      }
    }, {
      key: "_enabledChanged",
      value: function _enabledChanged(e) {
        var _this3 = this;

        this.haxData.forEach(function (el, i) {
          if (el.tag == e.detail.tag) {
            _this3.haxData[i].status = e.detail.status;
          }
        });
        this.dispatchEvent(new CustomEvent("appstore-changed", {
          detail: {
            value: this.getAppstoreValues()
          }
        }));
        console.log("appstore-changed", this.haxData);
      }
    }, {
      key: "_activeTabChanged",
      value: function _activeTabChanged(e) {
        if (e.detail.activeTab == "haxcore.search") {
          this.showCardList = true;
        } else {
          this.showCardList = false;
        }
      }
    }, {
      key: "_getElement",
      value: function _getElement(id) {
        return this.form && this.form.formElements && this.form.formElements[id] ? this.form.formElements[id].element : undefined;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this4 = this;

        changedProperties.forEach(
        /*#__PURE__*/
        function () {
          var _ref = babelHelpers.asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee2(oldValue, propName) {
            var tag, renderHaxData, i;
            return regeneratorRuntime.wrap(function _callee2$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (propName == "loading" && _this4.cardList) _this4.cardList.loading = _this4.loading;
                    if (propName == "showCardList" && _this4.cardList) _this4.cardList.showCardList = _this4.showCardList;
                    if (propName == "cols" && _this4.cardList) _this4.cardList.cols = _this4.cols;
                    if (propName == "cols" && _this4.searchColumns) _this4.searchColumns.value = _this4.cols;

                    if (propName == "wcRegistryEndpoint") {
                      _this4.haxData = [];
                      _this4.imports = [];
                      fetch(_this4[propName]).then(function (response) {
                        _this4.loading = true;
                        return response.json();
                      }).then(function (data) {
                        _this4.imports = data;
                      });
                    } // when imports changes make sure we import everything found


                    if (!(propName == "imports")) {
                      _context3.next = 7;
                      break;
                    }

                    return _context3.delegateYield(
                    /*#__PURE__*/
                    regeneratorRuntime.mark(function _callee() {
                      var list, noSchema, _loop;

                      return regeneratorRuntime.wrap(function _callee$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              list = _this4.haxData, noSchema = _this4.noSchema;
                              _loop =
                              /*#__PURE__*/
                              regeneratorRuntime.mark(function _loop() {
                                var file;
                                return regeneratorRuntime.wrap(function _loop$(_context) {
                                  while (1) {
                                    switch (_context.prev = _context.next) {
                                      case 0:
                                        file = _this4[propName][tag];
                                        _context.prev = 1;
                                        _context.next = 4;
                                        return new Promise(function (res, rej) {
                                          return _require.default(["".concat(_this4.basePath).concat(file)], res, rej);
                                        }).then(function (module) {
                                          if (module && Object.keys(module)[0] && module[Object.keys(module)[0]].haxProperties && module[Object.keys(module)[0]].haxProperties.gizmo && module[Object.keys(module)[0]].haxProperties.gizmo.title) {
                                            var detail = {
                                              tag: tag,
                                              file: file,
                                              status: true,
                                              schema: module[Object.keys(module)[0]].haxProperties
                                            };
                                            list.push(detail);
                                          } else {
                                            noSchema[tag] = file; //console.log(`${tag} doesn't have haxSchema`);
                                          }
                                        });

                                      case 4:
                                        _context.next = 9;
                                        break;

                                      case 6:
                                        _context.prev = 6;
                                        _context.t0 = _context["catch"](1);
                                        console.warn(_context.t0);

                                      case 9:
                                      case "end":
                                        return _context.stop();
                                    }
                                  }
                                }, _loop, null, [[1, 6]]);
                              });
                              _context2.t0 = regeneratorRuntime.keys(_this4[propName]);

                            case 3:
                              if ((_context2.t1 = _context2.t0()).done) {
                                _context2.next = 8;
                                break;
                              }

                              tag = _context2.t1.value;
                              return _context2.delegateYield(_loop(), "t2", 6);

                            case 6:
                              _context2.next = 3;
                              break;

                            case 8:
                              _this4.haxData = babelHelpers.toConsumableArray(list);
                              _this4.noSchema = {};
                              _this4.noSchema = noSchema;
                              _this4.loading = false;

                            case 12:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee);
                    })(), "t0", 7);

                  case 7:
                    // this is the local data we don't let change
                    if (propName == "haxData") {
                      _this4.filteredHaxData = babelHelpers.toConsumableArray(_this4.haxData);

                      if (_this4.haxData.length > 0) {
                        renderHaxData = {};

                        for (i in _this4.haxData) {
                          renderHaxData[_this4.haxData[i].tag] = _this4.haxData[i].file;
                        }

                        if (_this4.cardList) _this4.cardList.list = _this4.filteredHaxData;
                        if (_this4.haxTags) _this4.haxTags.editorValue = JSON.stringify(renderHaxData, null, 2);
                        console.log("haxData changed", _this4.haxData, _this4.filteredHaxData, renderHaxData, _this4.haxTags);
                      }
                    }

                    if (propName == "noSchema" && Object.keys(_this4.noSchema).length > 0 && _this4.otherTags) _this4.otherTags.editorValue = JSON.stringify(_this4.noSchema, null, 2);

                  case 9:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2);
          }));

          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      }
    }, {
      key: "applyFilters",
      value: function applyFilters(filters) {
        var data = babelHelpers.toConsumableArray(this.haxData);
        Object.keys(filters || {}).forEach(function (key) {
          if (filters[key] != "") {
            switch (key) {
              case "haxcore-search-search":
                data = data.filter(function (item) {
                  if (item.schema.gizmo.title.toLowerCase().includes(filters[key].toLowerCase())) {
                    return true;
                  }

                  return false;
                });
                break;

              case "haxcore-search-tags":
                data = data.filter(function (item) {
                  if (item.schema.gizmo.groups.includes(filters[key])) {
                    return true;
                  }

                  return false;
                });
                break;

              case "haxcore-search-hasdemo":
                // only filter if box checked otherwise show all
                if (filters[key]) {
                  data = data.filter(function (item) {
                    if (item.schema.demoSchema) {
                      return true;
                    }

                    return false;
                  });
                }

                break;
            }
          }
        });
        return data;
      }
      /**
       * Listen for response and then apply initial settings
       */

    }, {
      key: "_response",
      value: function _response(e) {
        if (this.searchColumns) this.searchColumns.value = this.cols;
        if (this.cardList) this.cardList.cols = this.cols;
      }
      /**
       * notice any value changing and then getting the form fresh
       */

    }, {
      key: "_valueChanged",
      value: function _valueChanged(e) {
        var _this5 = this;

        clearTimeout(this.__valueDebounce);
        this.__valueDebounce = setTimeout(function () {
          console.log("__valueDebounce", _this5.form.value);
          var haxcore = _this5.form && _this5.form.value && _this5.form.value.haxcore ? _this5.form.value.haxcore : undefined;

          if (haxcore) {
            var cols = haxcore.search && haxcore.search["haxcore-search-columns"] ? haxcore.search["haxcore-search-columns"] : undefined; // look for CDN provider

            if (haxcore.providers["haxcore-providers-cdn"] == "other") {
              _this5.wcRegistryEndpoint = haxcore.providers["haxcore-providers-other"] + "wc-registry.json";
            } else {
              _this5.wcRegistryEndpoint = haxcore.providers["haxcore-providers-cdn"] + "wc-registry.json";
            } // apply filters


            _this5.filteredHaxData = babelHelpers.toConsumableArray(_this5.applyFilters(haxcore.search));
            if (cols) _this5.cols = cols;
            if (_this5.cardList) _this5.cardList.requestUpdate();

            _this5.dispatchEvent(new CustomEvent("appstore-changed", {
              detail: {
                value: _this5.getAppstoreValues()
              }
            }));
          }
        }, 50);
      }
      /**
       * Return the appstore values
       */

    }, {
      key: "getAppstoreValues",
      value: function getAppstoreValues() {
        // get form values
        var value = this.shadowRoot.querySelector("#form").submit();
        console.log("value", value);
        value.haxcore = value.haxcore || {
          providers: {},
          templates: {},
          integrations: {}
        };
        var appstore = {
          provider: {
            cdn: value.haxcore.providers["haxcore-providers-cdn"],
            other: value.haxcore.providers["haxcore-providers-other"],
            pk: value.haxcore.providers["haxcore-providers-pk"]
          },
          apps: {},
          blox: value.haxcore.templates["haxcore-templates-templates"],
          stax: value.haxcore.templates["haxcore-templates-layouts"],
          autoloader: this.cardList ? this.cardList.value : {}
        }; // find the API keys

        for (var key in value.haxcore.integrations) {
          appstore.apps[key.replace("haxcore-integrations-", "")] = value.haxcore.integrations[key];
        }

        return appstore;
      }
      /**
       * Autoloader is a simple keypair
       */

    }, {
      key: "getAutoloader",
      value: function getAutoloader(data) {
        var autoload = {};

        for (var i in data) {
          if (data[i].status) {
            autoload[data[i].tag] = data[i].file;
          }
        }

        return autoload;
      }
    }, {
      key: "form",
      get: function get() {
        return this.shadowRoot && this.shadowRoot.querySelector("#form") ? this.shadowRoot.querySelector("#form") : undefined;
      }
    }, {
      key: "cardList",
      get: function get() {
        return this._getElement("haxcore.search.haxcore-search-autoloader");
      }
    }, {
      key: "searchColumns",
      get: function get() {
        this._getElement("haxcore.search.haxcore-search-columns");
      }
    }, {
      key: "haxTags",
      get: function get() {
        this._getElement("haxcore.providerdetails.haxcore-providerdetails-haxtags");
      }
    }, {
      key: "otherTags",
      get: function get() {
        this._getElement("haxcore.providerdetails.haxcore-providerdetails-othertags");
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread({}, _simpleFieldsForm.SimpleFieldsForm.properties, {
          /**
           * Show card list so that it SEEMS like its happenign when we click HAX elements
           */
          showCardList: {
            type: Boolean
          },

          /**
           * JS imports
           */
          imports: {
            type: Object
          },

          /**
           * HAXSchema array
           */
          haxData: {
            type: Array
          },

          /**
           * Valid tags on the CDN but that don't have haxSchema.
           */
          noSchema: {
            type: Object
          },

          /**
           * Data filtered by form changes
           */
          filteredHaxData: {
            type: Array
          },

          /**
           * Columns to render
           */
          cols: {
            type: Number
          },

          /**
           * End point to load this data
           */
          fieldsEndpoint: {
            type: String,
            attribute: "fields-endpoint"
          },

          /**
           * End point to load up a list of imports
           */
          wcRegistryEndpoint: {
            type: String,
            attribute: "wc-registry-endpoint"
          },

          /**
           * Request method
           */
          method: {
            type: String
          },
          loading: {
            type: Boolean,
            reflect: true
          }
        });
      }
    }]);
    return HaxElementListSelector;
  }(_litElement.LitElement);

  window.customElements.define(HaxElementListSelector.tag, HaxElementListSelector);
});