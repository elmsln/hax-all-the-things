import{LitElement as e,html as t,css as a}from"../../../lit-element/lit-element.js";import{haxElementToNode as s}from"../../utils/utils.js";import"../../../@material/mwc-switch/mwc-switch.js";import"../../../@material/mwc-button/mwc-button.js";import"../../../@material/mwc-formfield/mwc-formfield.js";import"../../simple-modal/simple-modal.js";import"../../hexagon-loader/hexagon-loader.js";import"../product-card.js";class HAXElementCardList extends e{constructor(){super(),this.showCardList=!1,this.list=[],this.value={},this.cols=2,this._layout="1-1-1",window.SimpleModal.requestAvailability()}static get tag(){return"hax-element-card-list"}static get styles(){return[a`
        :host {
          display: block;
          min-height: 100px;
        }
        product-card {
          display: block;
        }
        product-card div[slot="collapse-header"] {
        }
        product-card div[slot="details-collapse-content"] {
          max-height: 125px;
          overflow-y: auto;
        }
        .grid {
          display: grid;
          align-items: stretch;
          grid-template-columns: var(--hax-element-card--cols, repeat(2, 1fr));
          grid-gap: 15px;
          overflow-x: auto;
          padding: 2px;
        }
      `]}static get properties(){return{list:{type:Array},enabled:{type:Object},cols:{type:Number},value:{type:Object},hidden:{type:Boolean},showCardList:{type:Boolean},_layout:{type:String}}}render(){return this.showCardList?t`
          <hexagon-loader
            item-count="4"
            color="blue"
            ?loading="${this.loading}"
            size="large"
          ></hexagon-loader>
          <h2 ?hidden="${!this.loading}">Loading HAX elements..</h2>
          <div
            class="grid"
            style="--hax-element-card--cols: repeat(${this.cols}, 1fr)"
          >
            ${this.list.map((e,a)=>t`
                <product-card
                  .slot="col-${this.__getCol(a)}"
                  ?disabled="${!e.status}"
                  ?has-demo="${e.schema.demoSchema}"
                  heading="${e.schema.gizmo.title}"
                  icon="${e.schema.gizmo.icon}"
                  subheading="${e.schema.gizmo.description}"
                  accent-color="${e.schema.gizmo.color}"
                  data-index="${a}"
                  @product-card-demo-show="${this.toggleShowDemo}"
                  @product-card-demo-hide="${this.toggleShowDemo}"
                >
                  <div class="switch">
                    <mwc-formfield
                      label="${e.status?"Enabled":"Disabled"}"
                    >
                      <mwc-switch
                        ?checked="${this.value[tag]===this.value[file]}"
                        @change="${t=>this.elementStatusChange(e)}"
                      ></mwc-switch>
                    </mwc-formfield>
                  </div>
                  <div slot="details-collapse-header">Details</div>
                  <div slot="details-collapse-content">
                    <ul>
                      <li>
                        <strong>Tags:</strong> ${e.schema.gizmo.groups.map(e=>t`
                              ${e},
                            `)}
                      </li>
                      <li><strong>Tag name:</strong> <code>${e.tag}</code></li>
                      <li>
                        <strong>Developer usage:</strong>
                        <code>import "${e.file}";</code>
                      </li>
                      ${e.schema.gizmo.meta?t`
                            ${Object.keys(e.schema.gizmo.meta).map(a=>t`
                                <li>
                                  <strong>${this.capFirst(a)}:</strong>
                                  <span>${e.schema.gizmo.meta[a]}</span>
                                </li>
                              `)}
                          `:""}
                    </ul>
                  </div>
                  <div slot="demo-collapse-header">Demo</div>
                  <div slot="demo-collapse-content">
                    ${e.schema.demoSchema&&e.showDemo?t`
                          ${e.schema.demoSchema.map(e=>t`
                              <mwc-button
                                data-tag="${e.tag}"
                                @click="${this._viewDemo}"
                                >Pop up demo</mwc-button
                              >
                              <div class="demo">
                                ${this._haxElementToNode(e)}
                              </div>
                              <code-sample copy-clipboard-button>
                                <template>
                                  ${this._haxElementToNode(e)}
                                </template>
                              </code-sample>
                            `)}
                        `:""}
                  </div>
                </product-card>
              `)}
          </div>
        `:""}_viewDemo(e){e.target&&e.target.nextElementSibling&&window.dispatchEvent(new CustomEvent("simple-modal-show",{bubbles:!0,composed:!0,cancelable:!1,detail:{title:"Demo of "+e.target.getAttribute("data-tag"),styles:{"--simple-modal-width":"75vw","--simple-modal-max-width":"75vw"},elements:{content:e.target.nextElementSibling},invokedBy:e.target,clone:!0,modal:!0}}))}toggleShowDemo(e){this.list[e.path[0].getAttribute("data-index")].showDemo=e.detail.expanded,this.requestUpdate()}_haxElementToNode(e){return e&&e.tag?(import("../../code-sample/code-sample.js"),s(e)):""}capFirst(e){return e.charAt(0).toUpperCase()+e.slice(1)}elementStatusChange(e,t){t||(t=!this.value[e.tag]),this._updateItem(e.tag,e.file,t),this.dispatchEvent(new CustomEvent("value-changed",{detail:this})),this.requestUpdate()}__getCol(e){for(e++;e>this.cols;)e-=this.cols;return e}_updateItem(e,t,a=!1){a?this.value[e]=t:delete this.value[e]}updated(e){console.log("updated",this.cols),e.forEach((e,t)=>{if("list"==t&&this.list!==e&&(this.value={},this.list.forEach(e=>this._updateItem(e.tag,e.file,e.status))),"cols"==t)switch(this[t]){case 3:this._layout="1-1-1";break;case 4:this._layout="1-1-1-1";break;case 5:this._layout="1-1-1-1-1";break;case 6:this._layout="1-1-1-1-1-1";break;default:this._layout="1-1"}})}}customElements.define(HAXElementCardList.tag,HAXElementCardList);export{HAXElementCardList};